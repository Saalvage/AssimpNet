// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace AssimpNet.Unmanaged
{
    /// <summary>Enum used to distinguish data types</summary>
    public enum MetadataType
    {
        AI_BOOL = 0,
        AI_INT32 = 1,
        AI_UINT64 = 2,
        AI_FLOAT = 3,
        AI_DOUBLE = 4,
        AI_AISTRING = 5,
        AI_AIVECTOR3D = 6,
        AI_AIMETADATA = 7,
        AI_INT64 = 8,
        AI_UINT32 = 9,
        AI_META_MAX = 10,
        FORCE_32BIT = 2147483647
    }

    /// <summary>Enum used to distinguish data types</summary>
    /// <summary>Metadata entry</summary>
    /// <remarks>The type field uniquely identifies the underlying type of the data field</remarks>
    public unsafe partial class MetadataEntry : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal global::AssimpNet.Unmanaged.MetadataType mType;
            internal __IntPtr mData;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.MetadataEntry> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.MetadataEntry>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AssimpNet.Unmanaged.MetadataEntry managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AssimpNet.Unmanaged.MetadataEntry managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static MetadataEntry __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new MetadataEntry(native.ToPointer(), skipVTables);
        }

        internal static MetadataEntry __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (MetadataEntry)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static MetadataEntry __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new MetadataEntry(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MetadataEntry(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected MetadataEntry(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::AssimpNet.Unmanaged.MetadataType MType
        {
            get
            {
                return ((__Internal*)__Instance)->mType;
            }

            set
            {
                ((__Internal*)__Instance)->mType = value;
            }
        }

        public __IntPtr MData
        {
            get
            {
                return ((__Internal*)__Instance)->mData;
            }

            set
            {
                ((__Internal*)__Instance)->mData = (__IntPtr) value;
            }
        }
    }

    /// <summary>Container for holding metadata.</summary>
    /// <remarks>Metadata is a key-value store using string keys and values.</remarks>
    public unsafe partial class Metadata : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal uint mNumProperties;
            internal __IntPtr mKeys;
            internal __IntPtr mValues;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.Metadata> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.Metadata>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AssimpNet.Unmanaged.Metadata managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AssimpNet.Unmanaged.Metadata managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static Metadata __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new Metadata(native.ToPointer(), skipVTables);
        }

        internal static Metadata __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (Metadata)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static Metadata __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new Metadata(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Metadata(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected Metadata(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Length of the mKeys and mValues arrays, respectively</summary>
        public uint MNumProperties
        {
            get
            {
                return ((__Internal*)__Instance)->mNumProperties;
            }

            set
            {
                ((__Internal*)__Instance)->mNumProperties = value;
            }
        }

        /// <summary>Arrays of keys, may not be NULL. Entries in this array may not be NULL as well.</summary>
        public global::AssimpNet.Unmanaged.String MKeys
        {
            get
            {
                var __result0 = global::AssimpNet.Unmanaged.String.__GetOrCreateInstance(((__Internal*)__Instance)->mKeys, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->mKeys = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        /// <summary>
        /// <para>Arrays of values, may not be NULL. Entries in this array may be NULL if the</para>
        /// <para>corresponding property key has no assigned value.</para>
        /// </summary>
        public global::AssimpNet.Unmanaged.MetadataEntry MValues
        {
            get
            {
                var __result0 = global::AssimpNet.Unmanaged.MetadataEntry.__GetOrCreateInstance(((__Internal*)__Instance)->mValues, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->mValues = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }
    }
}
