// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace AssimpNet.Unmanaged
{
    /// <summary>
    /// <para>Standard return type for some library functions.</para>
    /// <para>Rarely used, and if, mostly in the C API.</para>
    /// </summary>
    public enum Return
    {
        /// <summary>Indicates that a function was successful</summary>
        ReturnSUCCESS = 0,
        /// <summary>Indicates that a function failed</summary>
        ReturnFAILURE = -1,
        /// <summary>
        /// <para>Indicates that not enough memory was available</para>
        /// <para>to perform the requested operation</para>
        /// </summary>
        ReturnOUTOFMEMORY = -3,
        /// <summary>Force 32-bit size enum</summary>
        AI_ENFORCE_ENUM_SIZE = 2147483647
    }

    /// <summary>
    /// <para>Seek origins (for the virtual file system API).</para>
    /// <para>Much cooler than using SEEK_SET, SEEK_CUR or SEEK_END.</para>
    /// </summary>
    public enum Origin
    {
        /// <summary>Beginning of the file</summary>
        OriginSET = 0,
        /// <summary>Current position of the file pointer</summary>
        OriginCUR = 1,
        /// <summary>End of the file, offsets must be negative</summary>
        OriginEND = 2,
        /// <summary>Force 32-bit size enum</summary>
        AI_ORIGIN_ENFORCE_ENUM_SIZE = 2147483647
    }

    /// <summary>
    /// <para>Enumerates predefined log streaming destinations.</para>
    /// <para>Logging to these streams can be enabled with a single call to</para>
    /// <para>#LogStream::createDefaultStream.</para>
    /// </summary>
    public enum DefaultLogStream
    {
        /// <summary>Stream the log to a file</summary>
        DefaultLogStreamFILE = 1,
        /// <summary>Stream the log to std::cout</summary>
        DefaultLogStreamSTDOUT = 2,
        /// <summary>Stream the log to std::cerr</summary>
        DefaultLogStreamSTDERR = 4,
        /// <summary>
        /// <para>MSVC only: Stream the log the the debugger</para>
        /// <para>(this relies on OutputDebugString from the Win32 SDK)</para>
        /// </summary>
        DefaultLogStreamDEBUGGER = 8,
        /// <summary>Force 32-bit size enum</summary>
        AI_DLS_ENFORCE_ENUM_SIZE = 2147483647
    }

    /// <summary>
    /// <para>Standard return type for some library functions.</para>
    /// <para>Rarely used, and if, mostly in the C API.</para>
    /// </summary>
    /// <summary>Represents a plane in a three-dimensional, euclidean space</summary>
    public unsafe partial class Plane : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal float a;
            internal float b;
            internal float c;
            internal float d;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.Plane> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.Plane>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AssimpNet.Unmanaged.Plane managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AssimpNet.Unmanaged.Plane managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static Plane __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new Plane(native.ToPointer(), skipVTables);
        }

        internal static Plane __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (Plane)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static Plane __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new Plane(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Plane(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected Plane(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Plane equation</summary>
        public float A
        {
            get
            {
                return ((__Internal*)__Instance)->a;
            }

            set
            {
                ((__Internal*)__Instance)->a = value;
            }
        }

        /// <summary>Plane equation</summary>
        public float B
        {
            get
            {
                return ((__Internal*)__Instance)->b;
            }

            set
            {
                ((__Internal*)__Instance)->b = value;
            }
        }

        /// <summary>Plane equation</summary>
        public float C
        {
            get
            {
                return ((__Internal*)__Instance)->c;
            }

            set
            {
                ((__Internal*)__Instance)->c = value;
            }
        }

        /// <summary>Plane equation</summary>
        public float D
        {
            get
            {
                return ((__Internal*)__Instance)->d;
            }

            set
            {
                ((__Internal*)__Instance)->d = value;
            }
        }
    }

    /// <summary>Represents a ray</summary>
    public unsafe partial class Ray : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal global::System.Numerics.Vector3 pos;
            internal global::System.Numerics.Vector3 dir;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.Ray> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.Ray>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AssimpNet.Unmanaged.Ray managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AssimpNet.Unmanaged.Ray managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static Ray __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new Ray(native.ToPointer(), skipVTables);
        }

        internal static Ray __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (Ray)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static Ray __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new Ray(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Ray(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected Ray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Position and direction of the ray</summary>
        public global::System.Numerics.Vector3 Pos
        {
            get
            {
                return ((__Internal*)__Instance)->pos;
            }

            set
            {
                ((__Internal*)__Instance)->pos = value;
            }
        }

        /// <summary>Position and direction of the ray</summary>
        public global::System.Numerics.Vector3 Dir
        {
            get
            {
                return ((__Internal*)__Instance)->dir;
            }

            set
            {
                ((__Internal*)__Instance)->dir = value;
            }
        }
    }

    /// <summary>Represents a color in Red-Green-Blue space.</summary>
    public unsafe partial class Color3D : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal float r;
            internal float g;
            internal float b;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.Color3D> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.Color3D>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AssimpNet.Unmanaged.Color3D managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AssimpNet.Unmanaged.Color3D managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static Color3D __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new Color3D(native.ToPointer(), skipVTables);
        }

        internal static Color3D __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (Color3D)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static Color3D __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new Color3D(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Color3D(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected Color3D(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Red, green and blue color values</summary>
        public float R
        {
            get
            {
                return ((__Internal*)__Instance)->r;
            }

            set
            {
                ((__Internal*)__Instance)->r = value;
            }
        }

        /// <summary>Red, green and blue color values</summary>
        public float G
        {
            get
            {
                return ((__Internal*)__Instance)->g;
            }

            set
            {
                ((__Internal*)__Instance)->g = value;
            }
        }

        /// <summary>Red, green and blue color values</summary>
        public float B
        {
            get
            {
                return ((__Internal*)__Instance)->b;
            }

            set
            {
                ((__Internal*)__Instance)->b = value;
            }
        }
    }

    /// <remarks>
    /// <para>Represents an UTF-8 string, zero byte terminated.</para>
    /// <para>The character set of an aiString is explicitly defined to be UTF-8. This Unicode</para>
    /// <para>transformation was chosen in the belief that most strings in 3d files are limited</para>
    /// <para>to ASCII, thus the character set needed to be strictly ASCII compatible.</para>
    /// <para>Most text file loaders provide proper Unicode input file handling, special unicode</para>
    /// <para>characters are correctly transcoded to UTF8 and are kept throughout the libraries'</para>
    /// <para>import pipeline.</para>
    /// <para>For most applications, it will be absolutely sufficient to interpret the</para>
    /// <para>aiString as ASCII data and work with it as one would work with a plain char*.</para>
    /// <para>Windows users in need of proper support for i.e asian characters can use the</para>
    /// <para>MultiByteToWideChar(), WideCharToMultiByte() WinAPI functionality to convert the</para>
    /// <para>UTF-8 strings to their working character set (i.e. MBCS, WideChar).</para>
    /// <para>We use this representation instead of std::string to be C-compatible. The</para>
    /// <para>(binary) length of such a string is limited to AI_MAXLEN characters (including the</para>
    /// <para>the terminating zero).</para>
    /// </remarks>
    public unsafe partial class String : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1028)]
        public partial struct __Internal
        {
            internal uint length;
            internal fixed sbyte data[1024];
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.String> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.String>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AssimpNet.Unmanaged.String managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AssimpNet.Unmanaged.String managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static String __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new String(native.ToPointer(), skipVTables);
        }

        internal static String __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (String)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static String __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new String(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private String(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected String(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>
        /// <para>Binary length of the string excluding the terminal 0. This is NOT the</para>
        /// <para>logical length of strings containing UTF-8 multi-byte sequences! It's</para>
        /// <para>the number of bytes from the beginning of the string to its end.</para>
        /// </summary>
        public uint Length
        {
            get
            {
                return ((__Internal*)__Instance)->length;
            }

            set
            {
                ((__Internal*)__Instance)->length = value;
            }
        }

        /// <summary>String buffer. Size limit is AI_MAXLEN</summary>
        public sbyte[] Data
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->data, 1024);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 1024; i++)
                        ((__Internal*)__Instance)->data[i] = value[i];
                }
            }
        }
    }

    /// <summary>
    /// <para>Stores the memory requirements for different components (e.g. meshes, materials,</para>
    /// <para>animations) of an import. All sizes are in bytes.</para>
    /// </summary>
    /// <remarks>Importer::GetMemoryRequirements()</remarks>
    public unsafe partial class MemoryInfo : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal uint textures;
            internal uint materials;
            internal uint meshes;
            internal uint nodes;
            internal uint animations;
            internal uint cameras;
            internal uint lights;
            internal uint total;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.MemoryInfo> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.MemoryInfo>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AssimpNet.Unmanaged.MemoryInfo managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AssimpNet.Unmanaged.MemoryInfo managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static MemoryInfo __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new MemoryInfo(native.ToPointer(), skipVTables);
        }

        internal static MemoryInfo __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (MemoryInfo)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static MemoryInfo __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new MemoryInfo(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MemoryInfo(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected MemoryInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Storage allocated for texture data</summary>
        public uint Textures
        {
            get
            {
                return ((__Internal*)__Instance)->textures;
            }

            set
            {
                ((__Internal*)__Instance)->textures = value;
            }
        }

        /// <summary>Storage allocated for material data</summary>
        public uint Materials
        {
            get
            {
                return ((__Internal*)__Instance)->materials;
            }

            set
            {
                ((__Internal*)__Instance)->materials = value;
            }
        }

        /// <summary>Storage allocated for mesh data</summary>
        public uint Meshes
        {
            get
            {
                return ((__Internal*)__Instance)->meshes;
            }

            set
            {
                ((__Internal*)__Instance)->meshes = value;
            }
        }

        /// <summary>Storage allocated for node data</summary>
        public uint Nodes
        {
            get
            {
                return ((__Internal*)__Instance)->nodes;
            }

            set
            {
                ((__Internal*)__Instance)->nodes = value;
            }
        }

        /// <summary>Storage allocated for animation data</summary>
        public uint Animations
        {
            get
            {
                return ((__Internal*)__Instance)->animations;
            }

            set
            {
                ((__Internal*)__Instance)->animations = value;
            }
        }

        /// <summary>Storage allocated for camera data</summary>
        public uint Cameras
        {
            get
            {
                return ((__Internal*)__Instance)->cameras;
            }

            set
            {
                ((__Internal*)__Instance)->cameras = value;
            }
        }

        /// <summary>Storage allocated for light data</summary>
        public uint Lights
        {
            get
            {
                return ((__Internal*)__Instance)->lights;
            }

            set
            {
                ((__Internal*)__Instance)->lights = value;
            }
        }

        /// <summary>Total storage allocated for the full import.</summary>
        public uint Total
        {
            get
            {
                return ((__Internal*)__Instance)->total;
            }

            set
            {
                ((__Internal*)__Instance)->total = value;
            }
        }
    }

    /// <summary>Type to store a in-memory data buffer.</summary>
    public unsafe partial class Buffer : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr data;
            internal __IntPtr end;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.Buffer> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.Buffer>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AssimpNet.Unmanaged.Buffer managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AssimpNet.Unmanaged.Buffer managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __data_OwnsNativeMemory = false;
        private bool __end_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static Buffer __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new Buffer(native.ToPointer(), skipVTables);
        }

        internal static Buffer __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (Buffer)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static Buffer __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new Buffer(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Buffer(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected Buffer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__data_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->data);
            if (__end_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->end);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Begin poiner</summary>
        public string Data
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->data);
            }

            set
            {
                if (__data_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->data);
                __data_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->data = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->data = (__IntPtr) __bytePtr0;
            }
        }

        /// <summary>End pointer</summary>
        public string End
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->end);
            }

            set
            {
                if (__end_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->end);
                __end_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->end = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->end = (__IntPtr) __bytePtr0;
            }
        }
    }
}
