// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace AssimpNet.Unmanaged
{
    /// <summary>A node in the imported hierarchy.</summary>
    /// <remarks>
    /// <para>Each node has name, a parent node (except for the root node),</para>
    /// <para>a transformation relative to its parent and possibly several child nodes.</para>
    /// <para>Simple file formats don't support hierarchical structures - for these formats</para>
    /// <para>the imported scene does consist of only a single root node without children.</para>
    /// </remarks>
    public unsafe partial class Node : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1144)]
        public partial struct __Internal
        {
            internal global::AssimpNet.Unmanaged.String.__Internal mName;
            internal global::System.Numerics.Matrix4x4 mTransformation;
            internal __IntPtr mParent;
            internal uint mNumChildren;
            internal __IntPtr mChildren;
            internal uint mNumMeshes;
            internal __IntPtr mMeshes;
            internal __IntPtr mMetaData;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.Node> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.Node>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AssimpNet.Unmanaged.Node managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AssimpNet.Unmanaged.Node managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static Node __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new Node(native.ToPointer(), skipVTables);
        }

        internal static Node __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (Node)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static Node __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new Node(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Node(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected Node(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>The name of the node.</summary>
        /// <remarks>
        /// <para>The name might be empty (length of zero) but all nodes which</para>
        /// <para>need to be referenced by either bones or animations are named.</para>
        /// <para>Multiple nodes may have the same name, except for nodes which are referenced</para>
        /// <para>by bones (see #aiBone and #aiMesh::mBones). Their names *must* be unique.</para>
        /// <para>Cameras and lights reference a specific node by name - if there</para>
        /// <para>are multiple nodes with this name, they are assigned to each of them.</para>
        /// <para></para>
        /// <para>There are no limitations with regard to the characters contained in</para>
        /// <para>the name string as it is usually taken directly from the source file.</para>
        /// <para>Implementations should be able to handle tokens such as whitespace, tabs,</para>
        /// <para>line feeds, quotation marks, ampersands etc.</para>
        /// <para>Sometimes assimp introduces new nodes not present in the source file</para>
        /// <para>into the hierarchy (usually out of necessity because sometimes the</para>
        /// <para>source hierarchy format is simply not compatible). Their names are</para>
        /// <para>surrounded by</para>
        /// <para>e.g.</para>
        /// <para>.</para>
        /// </remarks>
        public global::AssimpNet.Unmanaged.String MName
        {
            get
            {
                return global::AssimpNet.Unmanaged.String.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->mName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->mName = *(global::AssimpNet.Unmanaged.String.__Internal*) value.__Instance;
            }
        }

        /// <summary>The transformation relative to the node's parent.</summary>
        public global::System.Numerics.Matrix4x4 MTransformation
        {
            get
            {
                return ((__Internal*)__Instance)->mTransformation;
            }

            set
            {
                ((__Internal*)__Instance)->mTransformation = value;
            }
        }

        /// <summary>Parent node. nullptr if this node is the root node.</summary>
        public global::AssimpNet.Unmanaged.Node MParent
        {
            get
            {
                var __result0 = global::AssimpNet.Unmanaged.Node.__GetOrCreateInstance(((__Internal*)__Instance)->mParent, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->mParent = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        /// <summary>The number of child nodes of this node.</summary>
        public uint MNumChildren
        {
            get
            {
                return ((__Internal*)__Instance)->mNumChildren;
            }

            set
            {
                ((__Internal*)__Instance)->mNumChildren = value;
            }
        }

        /// <summary>The child nodes of this node. nullptr if mNumChildren is 0.</summary>
        public global::AssimpNet.Unmanaged.Node MChildren
        {
            get
            {
                var __result0 = global::AssimpNet.Unmanaged.Node.__GetOrCreateInstance(((__Internal*)__Instance)->mChildren, false);
                return __result0;
            }

            set
            {
                var __value = value is null ? __IntPtr.Zero : value.__Instance;
                ((__Internal*)__Instance)->mChildren = new __IntPtr(&__value);
            }
        }

        /// <summary>The number of meshes of this node.</summary>
        public uint MNumMeshes
        {
            get
            {
                return ((__Internal*)__Instance)->mNumMeshes;
            }

            set
            {
                ((__Internal*)__Instance)->mNumMeshes = value;
            }
        }

        /// <summary>
        /// <para>The meshes of this node. Each entry is an index into the</para>
        /// <para>mesh list of the #aiScene.</para>
        /// </summary>
        public uint* MMeshes
        {
            get
            {
                return (uint*) ((__Internal*)__Instance)->mMeshes;
            }

            set
            {
                ((__Internal*)__Instance)->mMeshes = (__IntPtr) value;
            }
        }

        /// <summary>
        /// <para>Metadata associated with this node or nullptr if there is no metadata.</para>
        /// <para>Whether any metadata is generated depends on the source file format. See the</para>
        /// </summary>
        public global::AssimpNet.Unmanaged.Metadata MMetaData
        {
            get
            {
                var __result0 = global::AssimpNet.Unmanaged.Metadata.__GetOrCreateInstance(((__Internal*)__Instance)->mMetaData, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->mMetaData = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }
    }

    /// <summary>The root structure of the imported data.</summary>
    /// <remarks>
    /// <para>Everything that was imported from the given file can be accessed from here.</para>
    /// <para>Objects of this class are generally maintained and owned by Assimp, not</para>
    /// <para>by the caller. You shouldn't want to instance it, nor should you ever try to</para>
    /// <para>delete a given scene on your own.</para>
    /// </remarks>
    public unsafe partial class Scene : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1168)]
        public partial struct __Internal
        {
            internal uint mFlags;
            internal __IntPtr mRootNode;
            internal uint mNumMeshes;
            internal __IntPtr mMeshes;
            internal uint mNumMaterials;
            internal __IntPtr mMaterials;
            internal uint mNumAnimations;
            internal __IntPtr mAnimations;
            internal uint mNumTextures;
            internal __IntPtr mTextures;
            internal uint mNumLights;
            internal __IntPtr mLights;
            internal uint mNumCameras;
            internal __IntPtr mCameras;
            internal __IntPtr mMetaData;
            internal global::AssimpNet.Unmanaged.String.__Internal mName;
            internal uint mNumSkeletons;
            internal __IntPtr mSkeletons;
            internal __IntPtr mPrivate;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.Scene> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.Scene>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AssimpNet.Unmanaged.Scene managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AssimpNet.Unmanaged.Scene managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static Scene __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new Scene(native.ToPointer(), skipVTables);
        }

        internal static Scene __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (Scene)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static Scene __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new Scene(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Scene(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected Scene(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>
        /// <para>Any combination of the AI_SCENE_FLAGS_XXX flags. By default</para>
        /// <para>this value is 0, no flags are set. Most applications will</para>
        /// <para>want to reject all scenes with the AI_SCENE_FLAGS_INCOMPLETE</para>
        /// <para>bit set.</para>
        /// </summary>
        public uint MFlags
        {
            get
            {
                return ((__Internal*)__Instance)->mFlags;
            }

            set
            {
                ((__Internal*)__Instance)->mFlags = value;
            }
        }

        /// <summary>The root node of the hierarchy.</summary>
        /// <remarks>
        /// <para>There will always be at least the root node if the import</para>
        /// <para>was successful (and no special flags have been set).</para>
        /// <para>Presence of further nodes depends on the format and content</para>
        /// <para>of the imported file.</para>
        /// </remarks>
        public global::AssimpNet.Unmanaged.Node MRootNode
        {
            get
            {
                var __result0 = global::AssimpNet.Unmanaged.Node.__GetOrCreateInstance(((__Internal*)__Instance)->mRootNode, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->mRootNode = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        /// <summary>The number of meshes in the scene.</summary>
        public uint MNumMeshes
        {
            get
            {
                return ((__Internal*)__Instance)->mNumMeshes;
            }

            set
            {
                ((__Internal*)__Instance)->mNumMeshes = value;
            }
        }

        /// <summary>The array of meshes.</summary>
        /// <remarks>
        /// <para>Use the indices given in the aiNode structure to access</para>
        /// <para>this array. The array is mNumMeshes in size. If the</para>
        /// <para>AI_SCENE_FLAGS_INCOMPLETE flag is not set there will always</para>
        /// <para>be at least ONE material.</para>
        /// </remarks>
        public global::AssimpNet.Unmanaged.Mesh MMeshes
        {
            get
            {
                var __result0 = global::AssimpNet.Unmanaged.Mesh.__GetOrCreateInstance(((__Internal*)__Instance)->mMeshes, false);
                return __result0;
            }

            set
            {
                var __value = value is null ? __IntPtr.Zero : value.__Instance;
                ((__Internal*)__Instance)->mMeshes = new __IntPtr(&__value);
            }
        }

        /// <summary>The number of materials in the scene.</summary>
        public uint MNumMaterials
        {
            get
            {
                return ((__Internal*)__Instance)->mNumMaterials;
            }

            set
            {
                ((__Internal*)__Instance)->mNumMaterials = value;
            }
        }

        /// <summary>The array of materials.</summary>
        /// <remarks>
        /// <para>Use the index given in each aiMesh structure to access this</para>
        /// <para>array. The array is mNumMaterials in size. If the</para>
        /// <para>AI_SCENE_FLAGS_INCOMPLETE flag is not set there will always</para>
        /// <para>be at least ONE material.</para>
        /// </remarks>
        public global::AssimpNet.Unmanaged.Material MMaterials
        {
            get
            {
                var __result0 = global::AssimpNet.Unmanaged.Material.__GetOrCreateInstance(((__Internal*)__Instance)->mMaterials, false);
                return __result0;
            }

            set
            {
                var __value = value is null ? __IntPtr.Zero : value.__Instance;
                ((__Internal*)__Instance)->mMaterials = new __IntPtr(&__value);
            }
        }

        /// <summary>The number of animations in the scene.</summary>
        public uint MNumAnimations
        {
            get
            {
                return ((__Internal*)__Instance)->mNumAnimations;
            }

            set
            {
                ((__Internal*)__Instance)->mNumAnimations = value;
            }
        }

        /// <summary>The array of animations.</summary>
        /// <remarks>
        /// <para>All animations imported from the given file are listed here.</para>
        /// <para>The array is mNumAnimations in size.</para>
        /// </remarks>
        public global::AssimpNet.Unmanaged.Animation MAnimations
        {
            get
            {
                var __result0 = global::AssimpNet.Unmanaged.Animation.__GetOrCreateInstance(((__Internal*)__Instance)->mAnimations, false);
                return __result0;
            }

            set
            {
                var __value = value is null ? __IntPtr.Zero : value.__Instance;
                ((__Internal*)__Instance)->mAnimations = new __IntPtr(&__value);
            }
        }

        /// <summary>The number of textures embedded into the file</summary>
        public uint MNumTextures
        {
            get
            {
                return ((__Internal*)__Instance)->mNumTextures;
            }

            set
            {
                ((__Internal*)__Instance)->mNumTextures = value;
            }
        }

        /// <summary>The array of embedded textures.</summary>
        /// <remarks>
        /// <para>Not many file formats embed their textures into the file.</para>
        /// <para>An example is Quake's MDL format (which is also used by</para>
        /// <para>some GameStudio versions)</para>
        /// </remarks>
        public global::AssimpNet.Unmanaged.Texture MTextures
        {
            get
            {
                var __result0 = global::AssimpNet.Unmanaged.Texture.__GetOrCreateInstance(((__Internal*)__Instance)->mTextures, false);
                return __result0;
            }

            set
            {
                var __value = value is null ? __IntPtr.Zero : value.__Instance;
                ((__Internal*)__Instance)->mTextures = new __IntPtr(&__value);
            }
        }

        /// <summary>
        /// <para>The number of light sources in the scene. Light sources</para>
        /// <para>are fully optional, in most cases this attribute will be 0</para>
        /// </summary>
        public uint MNumLights
        {
            get
            {
                return ((__Internal*)__Instance)->mNumLights;
            }

            set
            {
                ((__Internal*)__Instance)->mNumLights = value;
            }
        }

        /// <summary>The array of light sources.</summary>
        /// <remarks>
        /// <para>All light sources imported from the given file are</para>
        /// <para>listed here. The array is mNumLights in size.</para>
        /// </remarks>
        public global::AssimpNet.Unmanaged.Light MLights
        {
            get
            {
                var __result0 = global::AssimpNet.Unmanaged.Light.__GetOrCreateInstance(((__Internal*)__Instance)->mLights, false);
                return __result0;
            }

            set
            {
                var __value = value is null ? __IntPtr.Zero : value.__Instance;
                ((__Internal*)__Instance)->mLights = new __IntPtr(&__value);
            }
        }

        /// <summary>
        /// <para>The number of cameras in the scene. Cameras</para>
        /// <para>are fully optional, in most cases this attribute will be 0</para>
        /// </summary>
        public uint MNumCameras
        {
            get
            {
                return ((__Internal*)__Instance)->mNumCameras;
            }

            set
            {
                ((__Internal*)__Instance)->mNumCameras = value;
            }
        }

        /// <summary>The array of cameras.</summary>
        /// <remarks>
        /// <para>All cameras imported from the given file are listed here.</para>
        /// <para>The array is mNumCameras in size. The first camera in the</para>
        /// <para>array (if existing) is the default camera view into</para>
        /// <para>the scene.</para>
        /// </remarks>
        public global::AssimpNet.Unmanaged.Camera MCameras
        {
            get
            {
                var __result0 = global::AssimpNet.Unmanaged.Camera.__GetOrCreateInstance(((__Internal*)__Instance)->mCameras, false);
                return __result0;
            }

            set
            {
                var __value = value is null ? __IntPtr.Zero : value.__Instance;
                ((__Internal*)__Instance)->mCameras = new __IntPtr(&__value);
            }
        }

        /// <summary>The global metadata assigned to the scene itself.</summary>
        /// <remarks>
        /// <para>This data contains global metadata which belongs to the scene like</para>
        /// <para>unit-conversions, versions, vendors or other model-specific data. This</para>
        /// <para>can be used to store format-specific metadata as well.</para>
        /// </remarks>
        public global::AssimpNet.Unmanaged.Metadata MMetaData
        {
            get
            {
                var __result0 = global::AssimpNet.Unmanaged.Metadata.__GetOrCreateInstance(((__Internal*)__Instance)->mMetaData, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->mMetaData = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        /// <summary>The name of the scene itself.</summary>
        public global::AssimpNet.Unmanaged.String MName
        {
            get
            {
                return global::AssimpNet.Unmanaged.String.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->mName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->mName = *(global::AssimpNet.Unmanaged.String.__Internal*) value.__Instance;
            }
        }

        public uint MNumSkeletons
        {
            get
            {
                return ((__Internal*)__Instance)->mNumSkeletons;
            }

            set
            {
                ((__Internal*)__Instance)->mNumSkeletons = value;
            }
        }

        public global::AssimpNet.Unmanaged.Skeleton MSkeletons
        {
            get
            {
                var __result0 = global::AssimpNet.Unmanaged.Skeleton.__GetOrCreateInstance(((__Internal*)__Instance)->mSkeletons, false);
                return __result0;
            }

            set
            {
                var __value = value is null ? __IntPtr.Zero : value.__Instance;
                ((__Internal*)__Instance)->mSkeletons = new __IntPtr(&__value);
            }
        }

        public sbyte* MPrivate
        {
            get
            {
                return (sbyte*) ((__Internal*)__Instance)->mPrivate;
            }

            set
            {
                ((__Internal*)__Instance)->mPrivate = (__IntPtr) value;
            }
        }
    }
}
