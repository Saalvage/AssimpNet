// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace AssimpNet.Unmanaged
{
    /// <summary>Enumerates all supported types of light sources.</summary>
    public enum LightSourceType
    {
        LightSourceUNDEFINED = 0,
        /// <summary>
        /// <para>A directional light source has a well-defined direction</para>
        /// <para>but is infinitely far away. That's quite a good</para>
        /// <para>approximation for sun light.</para>
        /// </summary>
        LightSourceDIRECTIONAL = 1,
        /// <summary>
        /// <para>A point light source has a well-defined position</para>
        /// <para>in space but no direction - it emits light in all</para>
        /// <para>directions. A normal bulb is a point light.</para>
        /// </summary>
        LightSourcePOINT = 2,
        /// <summary>
        /// <para>A spot light source emits light in a specific</para>
        /// <para>angle. It has a position and a direction it is pointing to.</para>
        /// <para>A good example for a spot light is a light spot in</para>
        /// <para>sport arenas.</para>
        /// </summary>
        LightSourceSPOT = 3,
        /// <summary>
        /// <para>The generic light level of the world, including the bounces</para>
        /// <para>of all other light sources.</para>
        /// <para>Typically, there's at most one ambient light in a scene.</para>
        /// <para>This light type doesn't have a valid position, direction, or</para>
        /// <para>other properties, just a color.</para>
        /// </summary>
        LightSourceAMBIENT = 4,
        /// <summary>
        /// <para>An area light is a rectangle with predefined size that uniformly</para>
        /// <para>emits light from one of its sides. The position is center of the</para>
        /// <para>rectangle and direction is its normal vector.</para>
        /// </summary>
        LightSourceAREA = 5,
        AiLightSourceForce32Bit = 2147483647
    }

    /// <summary>Helper structure to describe a light source.</summary>
    /// <remarks>
    /// <para>Assimp supports multiple sorts of light sources, including</para>
    /// <para>directional, point and spot lights. All of them are defined with just</para>
    /// <para>a single structure and distinguished by their parameters.</para>
    /// <para>Note - some file formats (such as 3DS, ASE) export a &quot;target point&quot; -</para>
    /// <para>the point a spot light is looking at (it can even be animated). Assimp</para>
    /// <para>writes the target point as a sub-node of a spot-lights's main node,</para>
    /// <para>called &quot;&lt;spotName&gt;.Target&quot;. However, this is just additional information</para>
    /// <para>then, the transformation tracks of the main node make the</para>
    /// <para>spot light already point in the right direction.</para>
    /// </remarks>
    public unsafe partial class Light : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1132)]
        public partial struct __Internal
        {
            internal global::AssimpNet.Unmanaged.String.__Internal mName;
            internal global::AssimpNet.Unmanaged.LightSourceType mType;
            internal global::System.Numerics.Vector3 mPosition;
            internal global::System.Numerics.Vector3 mDirection;
            internal global::System.Numerics.Vector3 mUp;
            internal float mAttenuationConstant;
            internal float mAttenuationLinear;
            internal float mAttenuationQuadratic;
            internal global::System.Numerics.Vector3 mColorDiffuse;
            internal global::System.Numerics.Vector3 mColorSpecular;
            internal global::System.Numerics.Vector3 mColorAmbient;
            internal float mAngleInnerCone;
            internal float mAngleOuterCone;
            internal global::System.Numerics.Vector2 mSize;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.Light> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AssimpNet.Unmanaged.Light>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AssimpNet.Unmanaged.Light managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AssimpNet.Unmanaged.Light managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static Light __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new Light(native.ToPointer(), skipVTables);
        }

        internal static Light __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (Light)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static Light __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new Light(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Light(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected Light(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>The name of the light source.</summary>
        /// <remarks>
        /// <para>There must be a node in the scene-graph with the same name.</para>
        /// <para>This node specifies the position of the light in the scene</para>
        /// <para>hierarchy and can be animated.</para>
        /// </remarks>
        public global::AssimpNet.Unmanaged.String MName
        {
            get
            {
                return global::AssimpNet.Unmanaged.String.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->mName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->mName = *(global::AssimpNet.Unmanaged.String.__Internal*) value.__Instance;
            }
        }

        /// <summary>The type of the light source.</summary>
        /// <remarks>aiLightSource_UNDEFINED is not a valid value for this member.</remarks>
        public global::AssimpNet.Unmanaged.LightSourceType MType
        {
            get
            {
                return ((__Internal*)__Instance)->mType;
            }

            set
            {
                ((__Internal*)__Instance)->mType = value;
            }
        }

        /// <summary>
        /// <para>Position of the light source in space. Relative to the</para>
        /// <para>transformation of the node corresponding to the light.</para>
        /// </summary>
        /// <remarks>The position is undefined for directional lights.</remarks>
        public global::System.Numerics.Vector3 MPosition
        {
            get
            {
                return ((__Internal*)__Instance)->mPosition;
            }

            set
            {
                ((__Internal*)__Instance)->mPosition = value;
            }
        }

        /// <summary>
        /// <para>Direction of the light source in space. Relative to the</para>
        /// <para>transformation of the node corresponding to the light.</para>
        /// </summary>
        /// <remarks>
        /// <para>The direction is undefined for point lights. The vector</para>
        /// <para>may be normalized, but it needn't.</para>
        /// </remarks>
        public global::System.Numerics.Vector3 MDirection
        {
            get
            {
                return ((__Internal*)__Instance)->mDirection;
            }

            set
            {
                ((__Internal*)__Instance)->mDirection = value;
            }
        }

        /// <summary>
        /// <para>Up direction of the light source in space. Relative to the</para>
        /// <para>transformation of the node corresponding to the light.</para>
        /// </summary>
        /// <remarks>
        /// <para>The direction is undefined for point lights. The vector</para>
        /// <para>may be normalized, but it needn't.</para>
        /// </remarks>
        public global::System.Numerics.Vector3 MUp
        {
            get
            {
                return ((__Internal*)__Instance)->mUp;
            }

            set
            {
                ((__Internal*)__Instance)->mUp = value;
            }
        }

        /// <summary>Constant light attenuation factor.</summary>
        /// <remarks>
        /// <para>The intensity of the light source at a given distance 'd' from</para>
        /// <para>the light's position is</para>
        /// <para>This member corresponds to the att0 variable in the equation.</para>
        /// <para>Naturally undefined for directional lights.</para>
        /// </remarks>
        public float MAttenuationConstant
        {
            get
            {
                return ((__Internal*)__Instance)->mAttenuationConstant;
            }

            set
            {
                ((__Internal*)__Instance)->mAttenuationConstant = value;
            }
        }

        /// <summary>Linear light attenuation factor.</summary>
        /// <remarks>
        /// <para>The intensity of the light source at a given distance 'd' from</para>
        /// <para>the light's position is</para>
        /// <para>This member corresponds to the att1 variable in the equation.</para>
        /// <para>Naturally undefined for directional lights.</para>
        /// </remarks>
        public float MAttenuationLinear
        {
            get
            {
                return ((__Internal*)__Instance)->mAttenuationLinear;
            }

            set
            {
                ((__Internal*)__Instance)->mAttenuationLinear = value;
            }
        }

        /// <summary>Quadratic light attenuation factor.</summary>
        /// <remarks>
        /// <para>The intensity of the light source at a given distance 'd' from</para>
        /// <para>the light's position is</para>
        /// <para>This member corresponds to the att2 variable in the equation.</para>
        /// <para>Naturally undefined for directional lights.</para>
        /// </remarks>
        public float MAttenuationQuadratic
        {
            get
            {
                return ((__Internal*)__Instance)->mAttenuationQuadratic;
            }

            set
            {
                ((__Internal*)__Instance)->mAttenuationQuadratic = value;
            }
        }

        /// <summary>Diffuse color of the light source</summary>
        /// <remarks>
        /// <para>The diffuse light color is multiplied with the diffuse</para>
        /// <para>material color to obtain the final color that contributes</para>
        /// <para>to the diffuse shading term.</para>
        /// </remarks>
        public global::System.Numerics.Vector3 MColorDiffuse
        {
            get
            {
                return ((__Internal*)__Instance)->mColorDiffuse;
            }

            set
            {
                ((__Internal*)__Instance)->mColorDiffuse = value;
            }
        }

        /// <summary>Specular color of the light source</summary>
        /// <remarks>
        /// <para>The specular light color is multiplied with the specular</para>
        /// <para>material color to obtain the final color that contributes</para>
        /// <para>to the specular shading term.</para>
        /// </remarks>
        public global::System.Numerics.Vector3 MColorSpecular
        {
            get
            {
                return ((__Internal*)__Instance)->mColorSpecular;
            }

            set
            {
                ((__Internal*)__Instance)->mColorSpecular = value;
            }
        }

        /// <summary>Ambient color of the light source</summary>
        /// <remarks>
        /// <para>The ambient light color is multiplied with the ambient</para>
        /// <para>material color to obtain the final color that contributes</para>
        /// <para>to the ambient shading term. Most renderers will ignore</para>
        /// <para>this value it, is just a remaining of the fixed-function pipeline</para>
        /// <para>that is still supported by quite many file formats.</para>
        /// </remarks>
        public global::System.Numerics.Vector3 MColorAmbient
        {
            get
            {
                return ((__Internal*)__Instance)->mColorAmbient;
            }

            set
            {
                ((__Internal*)__Instance)->mColorAmbient = value;
            }
        }

        /// <summary>Inner angle of a spot light's light cone.</summary>
        /// <remarks>
        /// <para>The spot light has maximum influence on objects inside this</para>
        /// <para>angle. The angle is given in radians. It is 2PI for point</para>
        /// <para>lights and undefined for directional lights.</para>
        /// </remarks>
        public float MAngleInnerCone
        {
            get
            {
                return ((__Internal*)__Instance)->mAngleInnerCone;
            }

            set
            {
                ((__Internal*)__Instance)->mAngleInnerCone = value;
            }
        }

        /// <summary>Outer angle of a spot light's light cone.</summary>
        /// <remarks>
        /// <para>The spot light does not affect objects outside this angle.</para>
        /// <para>The angle is given in radians. It is 2PI for point lights and</para>
        /// <para>undefined for directional lights. The outer angle must be</para>
        /// <para>greater than or equal to the inner angle.</para>
        /// <para>It is assumed that the application uses a smooth</para>
        /// <para>interpolation between the inner and the outer cone of the</para>
        /// <para>spot light.</para>
        /// </remarks>
        public float MAngleOuterCone
        {
            get
            {
                return ((__Internal*)__Instance)->mAngleOuterCone;
            }

            set
            {
                ((__Internal*)__Instance)->mAngleOuterCone = value;
            }
        }

        /// <summary>Size of area light source.</summary>
        public global::System.Numerics.Vector2 MSize
        {
            get
            {
                return ((__Internal*)__Instance)->mSize;
            }

            set
            {
                ((__Internal*)__Instance)->mSize = value;
            }
        }
    }
}
